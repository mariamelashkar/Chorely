definitions:
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Task:
    properties:
      assigned_to:
        type: string
      created_at:
        type: string
      description:
        type: string
      due_date:
        type: string
      id:
        type: integer
      priority:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        description: '"admin" or "user"'
        type: string
      tasks:
        items:
          type: integer
        type: array
      username:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for a Task Management System.
  termsOfService: http://swagger.io/terms/
  title: Task Management System API
paths:
  /api/admin/tasks:
    get:
      description: Retrieves all tasks in the system (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all tasks
      tags:
      - Tasks
  /api/admin/tasks/{id}:
    delete:
      description: Deletes a task from the system (admin only)
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Task deleted successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a task
      tags:
      - Tasks
  /api/admin/users:
    get:
      description: Retrieves all users in the system without their passwords (admin
        only)
      produces:
      - application/json
      responses:
        "200":
          description: List of users without passwords
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Adds a new user to the system (admin only)
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /api/admin/users/{id}:
    delete:
      description: Deletes a user from the system (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User deleted successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      description: Retrieves details of a specific user by ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details without password
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates the details of an existing user (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an existing user
      tags:
      - Users
  /api/admin/users/{user_id}/tasks/{task_id}:
    post:
      consumes:
      - application/json
      description: Assigns an existing task to a specific user (admin only)
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Task assigned successfully
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User or Task not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Assign a task to a user
      tags:
      - Tasks
  /api/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a JWT token
      parameters:
      - description: Login Request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Invalid username or password
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Logs in a user
      tags:
      - Authentication
  /api/logout:
    post:
      description: Logs out a user by invalidating the JWT token
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
        "401":
          description: Invalid token or token already expired
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Logs out a user
      tags:
      - Authentication
  /api/testuser:
    post:
      consumes:
      - application/json
      description: This API creates a test user in the system for testing purposes.
      parameters:
      - description: Test User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Test user created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a test user
      tags:
      - Users
  /api/user/tasks:
    get:
      description: Retrieves all tasks for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get tasks for a user
      tags:
      - Tasks
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
