import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './UserManagement.css';

function UserManagement({ tasks, onAddTask }) {
  const [users, setUsers] = useState([]);
  const [newUser, setNewUser] = useState({ username: '', password: '', role: 'user' });

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const response = await axios.get('http://localhost:8080/api/users');
      setUsers(response.data || []);
    } catch (error) {
      console.error('Error fetching users', error);
    }
  };

  const handleAssignTask = async (userId, taskId) => {
    try {
      await axios.post(`http://localhost:8080/api/users/${userId}/tasks/${taskId}`);
      fetchUsers();
    } catch (error) {
      console.error('Error assigning task', error);
    }
  };

  const handleAddTask = () => {
    onAddTask();
  };

  const handleCreateUser = async () => {
    try {
      await axios.post('http://localhost:8080/api/users', newUser);
      setNewUser({ username: '', password: '', role: 'user' });
      fetchUsers();
    } catch (error) {
      console.error('Error creating user', error);
    }
  };

  return (
    <div className="user-management">
      <h2>User Management</h2>
      <button onClick={handleAddTask}>Add Task</button>
      <h3>Create New User</h3>
      <div className="new-user-form">
        <label>Username:</label>
        <input
          type="text"
          value={newUser.username}
          onChange={(e) => setNewUser({ ...newUser, username: e.target.value })}
        />
        <label>Password:</label>
        <input
          type="password"
          value={newUser.password}
          onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
        />
        <label>Role:</label>
        <select
          value={newUser.role}
          onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}
        >
          <option value="user">User</option>
          <option value="admin">Admin</option>
        </select>
        <button onClick={handleCreateUser}>Create User</button>
      </div>
      <table>
        <thead>
          <tr>
            <th>Username</th>
            <th>Role</th>
            <th>Tasks</th>
            <th>Assign Task</th>
          </tr>
        </thead>
        <tbody>
          {users.map(user => (
            <tr key={user.id}>
              <td>{user.username}</td>
              <td>{user.role}</td>
              <td>
                <ul>
                  {user.tasks.map(taskId => (
                    <li key={taskId}>{tasks.find(task => task.id === taskId)?.title || 'Unknown Task'}</li>
                  ))}
                </ul>
              </td>
              <td>
                <select onChange={(e) => handleAssignTask(user.id, e.target.value)}>
                  <option value="">Select Task</option>
                  {tasks.map(task => (
                    <option key={task.id} value={task.id}>{task.title}</option>
                  ))}
                </select>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default UserManagement;
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './UserManagement.css';

function UserManagement({ tasks, onAddTask }) {
  const [users, setUsers] = useState([]);
  const [newUser, setNewUser] = useState({ username: '', password: '', role: 'user' });

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const response = await axios.get('http://localhost:8080/api/users');
      setUsers(response.data || []);
    } catch (error) {
      console.error('Error fetching users', error);
    }
  };

  const handleAssignTask = async (userId, taskId) => {
    try {
      await axios.post(`http://localhost:8080/api/users/${userId}/tasks/${taskId}`);
      fetchUsers();
    } catch (error) {
      console.error('Error assigning task', error);
    }
  };

  const handleAddTask = () => {
    onAddTask();
  };

  const handleCreateUser = async () => {
    try {
      await axios.post('http://localhost:8080/api/users', newUser);
      setNewUser({ username: '', password: '', role: 'user' });
      fetchUsers();
    } catch (error) {
      console.error('Error creating user', error);
    }
  };

  return (
    <div className="user-management">
      <h2>User Management</h2>
      <button onClick={handleAddTask}>Add Task</button>
      <h3>Create New User</h3>
      <div className="new-user-form">
        <label>Username:</label>
        <input
          type="text"
          value={newUser.username}
          onChange={(e) => setNewUser({ ...newUser, username: e.target.value })}
        />
        <label>Password:</label>
        <input
          type="password"
          value={newUser.password}
          onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
        />
        <label>Role:</label>
        <select
          value={newUser.role}
          onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}
        >
          <option value="user">User</option>
          <option value="admin">Admin</option>
        </select>
        <button onClick={handleCreateUser}>Create User</button>
      </div>
      <table>
        <thead>
          <tr>
            <th>Username</th>
            <th>Role</th>
            <th>Tasks</th>
            <th>Assign Task</th>
          </tr>
        </thead>
        <tbody>
          {users.map(user => (
            <tr key={user.id}>
              <td>{user.username}</td>
              <td>{user.role}</td>
              <td>
                <ul>
                  {user.tasks.map(taskId => (
                    <li key={taskId}>{tasks.find(task => task.id === taskId)?.title || 'Unknown Task'}</li>
                  ))}
                </ul>
              </td>
              <td>
                <select onChange={(e) => handleAssignTask(user.id, e.target.value)}>
                  <option value="">Select Task</option>
                  {tasks.map(task => (
                    <option key={task.id} value={task.id}>{task.title}</option>
                  ))}
                </select>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default UserManagement;
import React, { useState, useEffect } from 'react';
import './TaskModal.css';

function TaskModal({ task, onSave, onClose }) {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [dueDate, setDueDate] = useState('');
  const [priority, setPriority] = useState('Low');
  const [completed, setCompleted] = useState(false);

  useEffect(() => {
    if (task) {
      setTitle(task.title);
      setDescription(task.description);
      setDueDate(task.dueDate);
      setPriority(task.priority);
      setCompleted(task.completed);
    }
  }, [task]);

  const handleSave = () => {
    const taskData = {
      id: task ? task.id : undefined,
      title,
      description,
      dueDate,
      priority,
      completed,
    };
    onSave(taskData);
  };

  return (
    <div className="modal">
      <div className="modal-content">
        <h2>{task ? 'Edit Task' : 'Add Task'}</h2>
        <label>Title:</label>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
        <label>Description:</label>
        <input
          type="text"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
        <label>Due Date:</label>
        <input
          type="date"
          value={dueDate}
          onChange={(e) => setDueDate(e.target.value)}
        />
        <label>Priority:</label>
        <select
          value={priority}
          onChange={(e) => setPriority(e.target.value)}
        >
          <option value="Low">Low</option>
          <option value="Medium">Medium</option>
          <option value="High">High</option>
        </select>
        <label>
          Completed:
          <input
            type="checkbox"
            checked={completed}
            onChange={(e) => setCompleted(e.target.checked)}
          />
        </label>
        <button onClick={handleSave}>Save</button>
        <button onClick={onClose}>Cancel</button>
      </div>
    </div>
  );
}

export default TaskModal;
import React from 'react';
import './TaskList.css';

function TaskList({ tasks, onEditTask, onDeleteTask }) {
  return (
    <div className="task-list">
      <h2>Tasks</h2>
      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Due Date</th>
            <th>Priority</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {tasks.map(task => (
            <tr key={task.id}>
              <td>{task.title}</td>
              <td>{task.description}</td>
              <td>{task.dueDate}</td>
              <td>{task.priority}</td>
              <td>{task.completed ? 'Completed' : 'Pending'}</td>
              <td>
                <button onClick={() => onEditTask(task)}>Edit</button>
                <button onClick={() => onDeleteTask(task.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default TaskList;
import React, { useState, useEffect } from 'react';
import './TaskModal.css';

function TaskModal({ task, onSave, onClose }) {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [dueDate, setDueDate] = useState('');
  const [priority, setPriority] = useState('Low');
  const [completed, setCompleted] = useState(false);

  useEffect(() => {
    if (task) {
      setTitle(task.title);
      setDescription(task.description);
      setDueDate(task.dueDate);
      setPriority(task.priority);
      setCompleted(task.completed);
    }
  }, [task]);

  const handleSave = () => {
    const taskData = {
      id: task ? task.id : undefined,
      title,
      description,
      dueDate,
      priority,
      completed,
    };
    onSave(taskData);
  };

  return (
    <div className="modal">
      <div className="modal-content">
        <h2>{task ? 'Edit Task' : 'Add Task'}</h2>
        <label>Title:</label>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
        <label>Description:</label>
        <input
          type="text"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
        <label>Due Date:</label>
        <input
          type="date"
          value={dueDate}
          onChange={(e) => setDueDate(e.target.value)}
        />
        <label>Priority:</label>
        <select
          value={priority}
          onChange={(e) => setPriority(e.target.value)}
        >
          <option value="Low">Low</option>
          <option value="Medium">Medium</option>
          <option value="High">High</option>
        </select>
        <label>
          Completed:
          <input
            type="checkbox"
            checked={completed}
            onChange={(e) => setCompleted(e.target.checked)}
          />
        </label>
        <button onClick={handleSave}>Save</button>
        <button onClick={onClose}>Cancel</button>
      </div>
    </div>
  );
}

export default TaskModal;
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import axios from 'axios';
import Header from './components/Header';
import Sidebar from './components/Sidebar';
import Dashboard from './components/Dashboard';
import TaskList from './components/TaskList';
import TaskModal from './components/TaskModal';
import Login from './components/Login';
import UserManagement from './components/UserManagement';
import './App.css';

function App() {
  const [tasks, setTasks] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [currentTask, setCurrentTask] = useState(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [role, setRole] = useState('');

  useEffect(() => {
    if (isLoggedIn) {
      fetchTasks();
    }
  }, [isLoggedIn]);

  const fetchTasks = async () => {
    try {
      const response = await axios.get('http://localhost:8080/api/tasks');
      setTasks(response.data || []);
    } catch (error) {
      console.error('Error fetching tasks', error);
    }
  };

  const handleAddTask = () => {
    setCurrentTask(null);
    setShowModal(true);
  };

  const handleEditTask = (task) => {
    setCurrentTask(task);
    setShowModal(true);
  };

  const handleSaveTask = async (task) => {
    try {
      if (currentTask) {
        await axios.put(`http://localhost:8080/api/tasks/${task.id}`, task);
        setTasks(tasks.map(t => t.id === task.id ? task : t));
      } else {
        const response = await axios.post('http://localhost:8080/api/tasks', task);
        setTasks([...tasks, response.data]);
      }
      setShowModal(false);
    } catch (error) {
      console.error('Error saving task', error);
    }
  };

  const handleDeleteTask = async (id) => {
    try {
      await axios.delete(`http://localhost:8080/api/tasks/${id}`);
      setTasks(tasks.filter(t => t.id !== id));
    } catch (error) {
      console.error('Error deleting task', error);
    }
  };

  const handleLogin = (role) => {
    setIsLoggedIn(true);
    setRole(role);
  };

  if (!isLoggedIn) {
    return <Login onLogin={handleLogin} />;
  }

  return (
    <Router>
      <div className="app">
        <Header />
        <div className="main">
          <Sidebar role={role} />
          <div className="content">
            <Routes>
              <Route path="/dashboard" element={<Dashboard tasks={tasks} onAddTask={handleAddTask} />} />
              <Route path="/tasks" element={<TaskList tasks={tasks} onEditTask={handleEditTask} onDeleteTask={handleDeleteTask} />} />
              {role === 'admin' && (
                <Route path="/user-management" element={<UserManagement tasks={tasks} onAddTask={handleAddTask} />} />
              )}
              <Route path="/settings" element={<div>Settings Component</div>} />
              <Route path="/" element={<Dashboard tasks={tasks} onAddTask={handleAddTask} />} />
            </Routes>
          </div>
        </div>
        {showModal && (
          <TaskModal
            task={currentTask}
            onSave={handleSaveTask}
            onClose={() => setShowModal(false)}
          />
        )}
        <footer>
          <button className="logout" onClick={() => setIsLoggedIn(false)}>Logout</button>
        </footer>
      </div>
    </Router>
  );
}

export default App;

